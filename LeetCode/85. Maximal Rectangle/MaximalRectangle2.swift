//
//  MaximalRectangle2.swift
//  LeetCode
//
//  Created by Ernesto Badillo on 4/23/19.
//  Copyright Â© 2019 Ernesto Badillo. All rights reserved.
//

import Foundation

class MaximalRectangle2 {
    
    static func run() {
        
        let matrix0: [[Character]] = [
            ["1","1","1","1","1"],
            ["1","1","1","1","1"],
            ["1","1","1","1","1"],
            ["1","1","1","1","0"]
        ]

        print("Expected: 16, Actual: \(MaximalRectangle2().maximalRectangle(matrix0))")

        let matrix1: [[Character]] = [
            ["1","0","1","0","0"],
            ["1","0","1","1","1"],
            ["1","1","1","1","1"],
            ["1","0","0","1","0"]
        ]

        print("Expected: 6, Actual: \(MaximalRectangle2().maximalRectangle(matrix1))")

        let matrix2: [[Character]] = [
            ["1","0","1","0","0"],
            ["1","0","0","0","1"],
            ["1","1","1","1","1"],
            ["1","0","0","1","0"]
        ]

        print("Expected: 5, Actual: \(MaximalRectangle2().maximalRectangle(matrix2))")

        let matrix3: [[Character]] = [
            ["1","1"],
            ["1","0"],
        ]

        print("Expected: 2, Actual: \(MaximalRectangle2().maximalRectangle(matrix3))")

        let matrix4: [[Character]] = [
            ["1","1"],
            ["1","1"],
        ]

        print("Expected: 4, Actual: \(MaximalRectangle2().maximalRectangle(matrix4))")

        let matrix5: [[Character]] = [
            ["1","0"],
            ["0","0"],
        ]

        print("Expected: 1, Actual: \(MaximalRectangle2().maximalRectangle(matrix5))")

        let matrix6: [[Character]] = [
            ["1","0"],
            ["1","0"],
        ]

        print("Expected: 2, Actual: \(MaximalRectangle2().maximalRectangle(matrix6))")

        let matrix7: [[Character]] = [
            ["1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","0"],
            ["1","1","1","1","1","1","1","0"],
            ["1","1","1","1","1","0","0","0"],
            ["0","1","1","1","1","0","0","0"]]

        print("Expected: 21, Actual: \(MaximalRectangle2().maximalRectangle(matrix7))")
        
        let matrix8: [[Character]] = [["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","0","1","1","0","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","1","1"],["0","1","1","0","1","1","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","0","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","0","0","1","1","0","0","1","1","0","1","1","0","1","0","1","0","1"],["1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","0","1","0","1","1","0","1","0","1","1"],["1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","1"],["1","1","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","1","1","1","0","0","1","1","1","1","1"],["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"],["1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1"],["1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","1","1"],["1","1","0","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1"],["1","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","0","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1"],["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","0","1","1","0","1","1"],["1","1","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","0","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","0","1","0","1","1","0","1","1","1","1","1","1","1","1"],["1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1"],["1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1"],["0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","0","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","0","1","1","1","1"],["1","1","0","1","1","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","0","1","0","0"],["0","1","1","0","1","1","1","1","1","1","1","0","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","0","1","1","0","1","1","1","0","1"]]
        
        print("Expected: ??, Actual: \(MaximalRectangle2().maximalRectangle(matrix8))")
    }
    
    var cache = Dictionary<Rectangle, Int>()
    
    func maximalRectangle(_ matrix: [[Character]]) -> Int {
        guard matrix.count > 0, matrix[0].count > 0 else { return 0 }
        return maximalRectangle(matrix, 0, 0, matrix.count-1, matrix[matrix.count-1].count-1, 0, 0)
    }
    
    func maximalRectangle(_ matrix: [[Character]], _ r0: Int, _ c0: Int, _ r1: Int, _ c1: Int, _ ri: Int, _ ci: Int) -> Int {
        
        guard r0 <= r1, c0 <= c1 else { return 0 }
        guard r1 < matrix.count, c1 < matrix[0].count else { return 0 }
        guard r0 != r1 || c0 != c1 else { return matrix[r0][c0] == "1" ? 1 : 0 }
        
        let rect = Rectangle(row0: r0, col0: c0, row1: r1, col1: c1)
        if let m = cache[rect] {
            return m
        }
        
        let rix = ri
        var cix = ci
        
        for r in rix...r1 {
            for c in cix...c1 {
                if matrix[r][c] != "1" {
                    let m1 = c-1 >= c0 ? size(r0, c0, r, c-1) : 0
                    let m2 = r-1 >= r0 ? size(r0, c0, r-1, c1) : 0
                    let m3 = c+1 < matrix[0].count ? maximalRectangle(matrix,
                                                                      r0, c+1, r1, c1,
                                                                      max(r-1, r0),
                                                                      r-1 >= r0 ? c1 : c+1) : 0
                    
                    let m4 = r+1 < matrix.count ? maximalRectangle(matrix,
                                                                   r+1, c0, r1, c1,
                                                                   r+1, c0) : 0
                    
                    let m5 = c0 <= c-1 ? maximalRectangle(matrix,
                                                          r0, c0, r1, c-1,
                                                          c > c0 ? r : (r > r0 ? r : r0),
                                                          c > c0 ? c-1 : (r > r0 ? c-1 : c0)) : 0
                    
                    let m = max(m1, m2, m3, m4, m5)
                    cache[rect] = m
                    return m
                }
            }
            cix = c0
        }
        
        let m = size(r0, c0, r1, c1)
        cache[rect] = m
        return m
    }
    
    func size(_ r0: Int, _ c0: Int, _ r1: Int, _ c1: Int) -> Int {
        return (r1 - r0 + 1) * (c1 - c0 + 1)
    }
    
    struct Rectangle : Hashable {
        let row0: Int
        let col0: Int
        let row1: Int
        let col1: Int
    }
}
